{"ast":null,"code":"import config from \"config\";\nimport { authHeader } from \"./backend\";\nvar api_url = \"https://myphr-api.firebaseapp.com\";\nexport var userService = {\n  login: login,\n  //fake\n  newLogin: newLogin,\n  //real\n  getBasicInfo: getBasicInfo,\n  //real\n  getContactInfo: getContactInfo,\n  //real\n  logout: logout,\n  getCaregiver: getCaregiver,\n  //real\n  getEpisodes: getEpisodes,\n  getHealthProfile: getHealthProfile,\n  //real\n  getPhysician: getPhysician,\n  //real\n  getCaregiverContactInfo: getCaregiverContactInfo,\n  //fetch POST methods\n  updateLanguage: updateLanguage,\n  addDiet: addDiet,\n  addAdvanceDirective: addAdvanceDirective,\n  editContactInfo: editContactInfo,\n  editCaregivers: editCaregivers,\n  editCaregiverContacts: editCaregiverContacts,\n  getAlerts: getAlerts\n}; //for fake api, responsing to backend.js\n\nfunction login(username, password) {\n  var requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users/authenticate\"), requestOptions).then(handleResponse).then(function (user) {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + \":\" + password);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n/**\n * fetch from real api\n */\n\n\nfunction newLogin(username, password) {\n  //each time fresh local storage\n  localStorage.removeItem(\"oneUser\");\n  return fetch(\"\".concat(api_url, \"/login?username=\").concat(username, \"&password=\").concat(password)).then(handleResponse).then(function (user) {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"oneUser\", JSON.stringify(user));\n      console.log(localStorage.getItem(\"oneUser\")); //store client_id and token locally\n    }\n\n    return user;\n  });\n} //response to real api\n\n\nfunction getHealthProfile(client_id, token) {\n  localStorage.removeItem(\"healthProfile\");\n  return fetch(\"\".concat(api_url, \"/health_profile?client_id=\").concat(client_id, \"&token=\").concat(token)).then(handleResponse).then(function (healthProfile) {\n    // login successful if there's a user in the response\n    if (healthProfile) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"healthProfile\", JSON.stringify(healthProfile));\n      console.log(\"health profile information:\" + localStorage.getItem(\"healthProfile\"));\n    }\n\n    return healthProfile;\n  });\n}\n\nfunction getBasicInfo(client_id, user_id, token) {\n  localStorage.removeItem(\"basicInfo\");\n  return fetch(\"\".concat(api_url, \"/basic_info?client_id=\").concat(client_id, \"&user_id=\").concat(user_id, \"&token=\").concat(token), {\n    method: \"GET\"\n  }).then(handleResponse).then(function (basicInfo) {\n    // login successful if there's a user in the response\n    if (basicInfo) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"basicInfo\", JSON.stringify(basicInfo));\n      console.log(\"basicInfo:\" + localStorage.getItem(\"basicInfo\"));\n    }\n\n    return basicInfo;\n  });\n}\n\nfunction getContactInfo(client_id, is_active, token) {\n  localStorage.removeItem(\"contactInfo\");\n  return fetch(\"\".concat(api_url, \"/contact_info?client_id=\").concat(client_id, \"&is_active=\").concat(is_active, \"&token=\").concat(token)).then(handleResponse).then(function (contactInfo) {\n    // login successful if there's a user in the response\n    if (contactInfo) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"contactInfo\", JSON.stringify(contactInfo));\n      console.log(\"contactInfo:\" + localStorage.getItem(\"contactInfo\"));\n    }\n\n    return contactInfo;\n  });\n}\n\nfunction getCaregiver(client_id, token, is_active) {\n  localStorage.removeItem(\"caregiver\");\n  return fetch(\"\".concat(api_url, \"/caregiver?client_id=\").concat(client_id, \"&token=\").concat(token, \"&is_active=\").concat(is_active)).then(handleResponse).then(function (caregiver) {\n    // login successful if there's a user in the response\n    if (caregiver) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"caregiver\", JSON.stringify(caregiver));\n      console.log(\"caregiver:\" + localStorage.getItem(\"caregiver\"));\n    }\n\n    return caregiver;\n  });\n}\n\nfunction getPhysician(client_id, token) {\n  localStorage.removeItem(\"physician\");\n  return fetch(\"\".concat(api_url, \"/physician?client_id=\").concat(client_id, \"&token=\").concat(token)).then(handleResponse).then(function (physician) {\n    // login successful if there's a user in the response\n    if (physician) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"physician\", JSON.stringify(physician));\n      console.log(\"physician:\" + localStorage.getItem(\"physician\"));\n    }\n\n    return physician;\n  });\n}\n\nfunction getEpisodes(client_id, token, is_active) {\n  localStorage.removeItem(\"episodes\");\n  return fetch(\"\".concat(api_url, \"/episodes?client_id=\").concat(client_id, \"&token=\").concat(token, \"&is_active=\").concat(is_active)).then(handleResponse).then(function (episodes) {\n    // login successful if there's a user in the response\n    if (episodes) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"episodes\", JSON.stringify(episodes));\n      console.log(\"episodes:\" + localStorage.getItem(\"episodes\"));\n    }\n\n    return episodes;\n  });\n}\n\nfunction getCaregiverContactInfo(client_id, token, is_active, caregiver_client_id) {\n  localStorage.removeItem(\"caregiverContactInfo\");\n  return fetch(\"\".concat(api_url, \"/caregiver_contact_info?client_id=\").concat(client_id, \"&token=\").concat(token, \"&is_active=\").concat(is_active, \"&caregiver_client_id=\").concat(caregiver_client_id)).then(handleResponse).then(function (caregiverContactInfo) {\n    // login successful if there's a user in the response\n    if (caregiverContactInfo) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"caregiverContactInfo\" + client_id, JSON.stringify(caregiverContactInfo));\n      console.log(\"caregiverContactInfo:\" + localStorage.getItem(\"caregiverContactInfo\" + client_id));\n    }\n\n    return caregiverContactInfo;\n  });\n}\n\nfunction getAlerts() {\n  localStorage.removeItem(\"alerts\");\n  return fetch(\"http://www.mocky.io/v2/5d1a60c62f00000e00fd7624\") // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we locally store data\n  .then(function (alerts) {\n    localStorage.setItem(\"alerts\", JSON.stringify(alerts));\n    var ale = localStorage.getItem(\"alerts\");\n    console.log(\"print alerts:\" + alerts);\n    return ale;\n  });\n}\n\nfunction logout() {\n  localStorage.removeItem(\"oneUser\"); //localStorage.removeItem(\"address\");\n}\n\nfunction updateLanguage(client_id, token, service_language) {\n  return fetch(\"\".concat(api_url, \"/client/\").concat(client_id, \"/service_language?token=\").concat(token, \"&service_language=\").concat(service_language), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction addDiet(client_id, token, diet) {\n  return fetch(\"\".concat(api_url, \"/client/\").concat(client_id, \"/add_diet?token=\").concat(token, \"&diet=\").concat(diet), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction addAdvanceDirective(client_id, token, advance_directive) {\n  return fetch(\"\".concat(api_url, \"/client/\").concat(client_id, \"/add_advance_directive?token=\").concat(token, \"&advance_directive=\").concat(advance_directive), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction editContactInfo(client_id, token, category, text, type) {\n  return fetch(\"\".concat(api_url, \"/client/\").concat(client_id, \"/edit_contact_info?token=\").concat(token, \"&category=\").concat(category, \"&text=\").concat(text, \"&type=\").concat(type), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction editCaregivers(client_id, token, name, relationship, is_primary) {\n  return fetch(\"\".concat(api_url, \"/client/\").concat(client_id, \"/edit_caregivers?token=\").concat(token, \"&name=\").concat(name, \"&relationship=\").concat(relationship, \"&is_primary=\").concat(is_primary), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction editCaregiverContacts(client_id, token, category, text, type, is_primary) {\n  return fetch(\"\".concat(api_url, \"/client/\").concat(client_id, \"/edit_caregiver_contacts?token=\").concat(token, \"&category=\").concat(category, \"&text=\").concat(text, \"&type=\").concat(type, \"&is_primary=\").concat(is_primary), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); //location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/wenyanli/Desktop/MyPHR_Portal/src/service.js"],"names":["config","authHeader","api_url","userService","login","newLogin","getBasicInfo","getContactInfo","logout","getCaregiver","getEpisodes","getHealthProfile","getPhysician","getCaregiverContactInfo","updateLanguage","addDiet","addAdvanceDirective","editContactInfo","editCaregivers","editCaregiverContacts","getAlerts","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","removeItem","console","log","getItem","client_id","token","healthProfile","user_id","basicInfo","is_active","contactInfo","caregiver","physician","episodes","caregiver_client_id","caregiverContactInfo","response","json","alerts","ale","service_language","res","catch","err","diet","advance_directive","category","text","type","name","relationship","is_primary","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import config from \"config\";\nimport { authHeader } from \"./backend\";\n\nconst api_url = \"https://myphr-api.firebaseapp.com\";\n\nexport const userService = {\n  login, //fake\n  newLogin, //real\n  getBasicInfo, //real\n  getContactInfo, //real\n  logout,\n  getCaregiver, //real\n\n  getEpisodes,\n  getHealthProfile, //real\n  getPhysician, //real\n  getCaregiverContactInfo,\n\n  //fetch POST methods\n  updateLanguage,\n  addDiet,\n  addAdvanceDirective,\n  editContactInfo,\n  editCaregivers,\n  editCaregiverContacts,\n  getAlerts\n};\n\n//for fake api, responsing to backend.js\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password })\n  };\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n    .then(handleResponse)\n    .then(user => {\n      // login successful if there's a user in the response\n      if (user) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        user.authdata = window.btoa(username + \":\" + password);\n        localStorage.setItem(\"user\", JSON.stringify(user));\n      }\n\n      return user;\n    });\n}\n\n/**\n * fetch from real api\n */\n\nfunction newLogin(username, password) {\n  //each time fresh local storage\n  localStorage.removeItem(\"oneUser\");\n\n  return fetch(`${api_url}/login?username=${username}&password=${password}`)\n    .then(handleResponse)\n    .then(user => {\n      // login successful if there's a user in the response\n      if (user) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"oneUser\", JSON.stringify(user));\n        console.log(localStorage.getItem(\"oneUser\"));\n        //store client_id and token locally\n      }\n      return user;\n    });\n}\n\n//response to real api\nfunction getHealthProfile(client_id, token) {\n  localStorage.removeItem(\"healthProfile\");\n\n  return fetch(\n    `${api_url}/health_profile?client_id=${client_id}&token=${token}`\n  )\n    .then(handleResponse)\n    .then(healthProfile => {\n      // login successful if there's a user in the response\n      if (healthProfile) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"healthProfile\", JSON.stringify(healthProfile));\n        console.log(\n          \"health profile information:\" + localStorage.getItem(\"healthProfile\")\n        );\n      }\n      return healthProfile;\n    });\n}\n\nfunction getBasicInfo(client_id, user_id, token) {\n  localStorage.removeItem(\"basicInfo\");\n  return fetch(\n    `${api_url}/basic_info?client_id=${client_id}&user_id=${user_id}&token=${token}`,\n    {\n      method: \"GET\"\n    }\n  )\n    .then(handleResponse)\n    .then(basicInfo => {\n      // login successful if there's a user in the response\n      if (basicInfo) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"basicInfo\", JSON.stringify(basicInfo));\n        console.log(\"basicInfo:\" + localStorage.getItem(\"basicInfo\"));\n      }\n      return basicInfo;\n    });\n}\n\nfunction getContactInfo(client_id, is_active, token) {\n  localStorage.removeItem(\"contactInfo\");\n  return fetch(\n    `${api_url}/contact_info?client_id=${client_id}&is_active=${is_active}&token=${token}`\n  )\n    .then(handleResponse)\n    .then(contactInfo => {\n      // login successful if there's a user in the response\n      if (contactInfo) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"contactInfo\", JSON.stringify(contactInfo));\n        console.log(\"contactInfo:\" + localStorage.getItem(\"contactInfo\"));\n      }\n      return contactInfo;\n    });\n}\nfunction getCaregiver(client_id, token, is_active) {\n  localStorage.removeItem(\"caregiver\");\n  return fetch(\n    `${api_url}/caregiver?client_id=${client_id}&token=${token}&is_active=${is_active}`\n  )\n    .then(handleResponse)\n    .then(caregiver => {\n      // login successful if there's a user in the response\n      if (caregiver) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"caregiver\", JSON.stringify(caregiver));\n        console.log(\"caregiver:\" + localStorage.getItem(\"caregiver\"));\n      }\n      return caregiver;\n    });\n}\nfunction getPhysician(client_id, token) {\n  localStorage.removeItem(\"physician\");\n  return fetch(`${api_url}/physician?client_id=${client_id}&token=${token}`)\n    .then(handleResponse)\n    .then(physician => {\n      // login successful if there's a user in the response\n      if (physician) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"physician\", JSON.stringify(physician));\n        console.log(\"physician:\" + localStorage.getItem(\"physician\"));\n      }\n      return physician;\n    });\n}\nfunction getEpisodes(client_id, token, is_active) {\n  localStorage.removeItem(\"episodes\");\n  return fetch(\n    `${api_url}/episodes?client_id=${client_id}&token=${token}&is_active=${is_active}`\n  )\n    .then(handleResponse)\n    .then(episodes => {\n      // login successful if there's a user in the response\n      if (episodes) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"episodes\", JSON.stringify(episodes));\n        console.log(\"episodes:\" + localStorage.getItem(\"episodes\"));\n      }\n      return episodes;\n    });\n}\nfunction getCaregiverContactInfo(\n  client_id,\n  token,\n  is_active,\n  caregiver_client_id\n) {\n  localStorage.removeItem(\"caregiverContactInfo\");\n  return fetch(\n    `${api_url}/caregiver_contact_info?client_id=${client_id}&token=${token}&is_active=${is_active}&caregiver_client_id=${caregiver_client_id}`\n  )\n    .then(handleResponse)\n    .then(caregiverContactInfo => {\n      // login successful if there's a user in the response\n      if (caregiverContactInfo) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\n          \"caregiverContactInfo\" + client_id,\n          JSON.stringify(caregiverContactInfo)\n        );\n        console.log(\n          \"caregiverContactInfo:\" +\n            localStorage.getItem(\"caregiverContactInfo\" + client_id)\n        );\n      }\n      return caregiverContactInfo;\n    });\n}\nfunction getAlerts() {\n  localStorage.removeItem(\"alerts\");\n  return (\n    fetch(`http://www.mocky.io/v2/5d1a60c62f00000e00fd7624`)\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we locally store data\n      .then(alerts => {\n        localStorage.setItem(\"alerts\", JSON.stringify(alerts));\n\n        const ale = localStorage.getItem(\"alerts\");\n        console.log(\"print alerts:\" + alerts);\n        return ale;\n      })\n  );\n}\n\nfunction logout() {\n  localStorage.removeItem(\"oneUser\");\n  //localStorage.removeItem(\"address\");\n}\n\nfunction updateLanguage(client_id, token, service_language) {\n  return fetch(\n    `${api_url}/client/${client_id}/service_language?token=${token}&service_language=${service_language}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction addDiet(client_id, token, diet) {\n  return fetch(\n    `${api_url}/client/${client_id}/add_diet?token=${token}&diet=${diet}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction addAdvanceDirective(client_id, token, advance_directive) {\n  return fetch(\n    `${api_url}/client/${client_id}/add_advance_directive?token=${token}&advance_directive=${advance_directive}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction editContactInfo(client_id, token, category, text, type) {\n  return fetch(\n    `${api_url}/client/${client_id}/edit_contact_info?token=${token}&category=${category}&text=${text}&type=${type}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction editCaregivers(client_id, token, name, relationship, is_primary) {\n  return fetch(\n    `${api_url}/client/${client_id}/edit_caregivers?token=${token}&name=${name}&relationship=${relationship}&is_primary=${is_primary}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction editCaregiverContacts(\n  client_id,\n  token,\n  category,\n  text,\n  type,\n  is_primary\n) {\n  return fetch(\n    `${api_url}/client/${client_id}/edit_caregiver_contacts?token=${token}&category=${category}&text=${text}&type=${type}&is_primary=${is_primary}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        //location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}