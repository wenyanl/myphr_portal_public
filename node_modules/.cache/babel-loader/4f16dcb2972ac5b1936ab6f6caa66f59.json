{"ast":null,"code":"import config from \"config\";\nimport { authHeader } from \"./backend\";\nexport var userService = {\n  login: login,\n  //fake\n  newLogin: newLogin,\n  //real\n  getBasicInfo: getBasicInfo,\n  //real\n  getContactInfo: getContactInfo,\n  //real\n  logout: logout,\n  getCaregiver: getCaregiver,\n  //real\n  getClient: getClient,\n  //fake\n  getAll: getAll,\n  getAddress: getAddress,\n  //fake\n  getCaregivers: getCaregivers,\n  //fake\n  getEpisodes: getEpisodes,\n  getHealthProfile: getHealthProfile,\n  //real\n  getPhysician: getPhysician,\n  //real\n  getCaregiverContactInfo: getCaregiverContactInfo,\n  //fetch POST methods\n  updateLanguage: updateLanguage,\n  addDiet: addDiet,\n  addAdvanceDirective: addAdvanceDirective,\n  editContactInfo: editContactInfo,\n  editCaregivers: editCaregivers,\n  editCaregiverContacts: editCaregiverContacts,\n  getAlerts: getAlerts\n}; //for fake api, responsing to backend.js\n\nfunction login(username, password) {\n  var requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users/authenticate\"), requestOptions).then(handleResponse).then(function (user) {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + \":\" + password);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n/**\n * fetch from real api\n */\n\n\nfunction newLogin(username, password) {\n  //each time fresh local storage\n  localStorage.removeItem(\"oneUser\");\n  return fetch(\"http://localhost:5000/login?username=\".concat(username, \"&password=\").concat(password)).then(handleResponse).then(function (user) {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"oneUser\", JSON.stringify(user));\n      console.log(localStorage.getItem(\"oneUser\")); //store client_id and token locally\n    }\n\n    return user;\n  });\n}\n\nfunction getClient(client_id) {\n  localStorage.removeItem(\"client\");\n  return fetch(\"https://5cdc6232069eb30014202d8e.mockapi.io/profile/\".concat(client_id)) //must have a place to put userId\n  // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we update the users state\n  .then(function (client) {\n    localStorage.setItem(\"client\", JSON.stringify(client));\n    console.log(\"llll:\" + localStorage.getItem(\"client\"));\n    var cli = localStorage.getItem(\"client\");\n    return cli;\n  });\n}\n\nfunction getAddress(id) {\n  return fetch(\"https://5cdc6232069eb30014202d8e.mockapi.io/addresses/\".concat(id)) //must have a place to put userId\n  // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we update the users state\n  .then(function (address) {\n    localStorage.setItem(\"address\", JSON.stringify(address));\n    var c = localStorage.getItem(\"address\");\n    return c;\n  });\n} //https://5cdc6232069eb30014202d8e.mockapi.io/addresses/${id}\n//how about two or more caregivers, is the client_id patient id?\n\n\nfunction getCaregivers(client_id) {\n  localStorage.removeItem(\"caregivers\");\n  return fetch(\"https://5cdc6232069eb30014202d8e.mockapi.io/caregivers/\".concat(client_id)) //must have a place to put userId\n  // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we update the users state\n  .then(function (caregivers) {\n    localStorage.setItem(\"caregivers\", JSON.stringify(caregivers));\n    var c = localStorage.getItem(\"caregivers\"); // console.log(\"print caregiver:\" + c);\n\n    return c;\n  });\n} //response to real api\n\n\nfunction getHealthProfile(client_id, token) {\n  localStorage.removeItem(\"healthProfile\");\n  return fetch(\"http://localhost:5000/health_profile?client_id=\".concat(client_id, \"&token=\").concat(token)).then(handleResponse).then(function (healthProfile) {\n    // login successful if there's a user in the response\n    if (healthProfile) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"healthProfile\", JSON.stringify(healthProfile));\n      console.log(\"health profile information:\" + localStorage.getItem(\"healthProfile\"));\n    }\n\n    return healthProfile;\n  });\n}\n\nfunction getBasicInfo(client_id, user_id, token) {\n  localStorage.removeItem(\"basicInfo\");\n  return fetch(\"http://localhost:5000/basic_info?client_id=\".concat(client_id, \"&user_id=\").concat(user_id, \"&token=\").concat(token)).then(handleResponse).then(function (basicInfo) {\n    // login successful if there's a user in the response\n    if (basicInfo) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"basicInfo\", JSON.stringify(basicInfo));\n      console.log(\"basicInfo:\" + localStorage.getItem(\"basicInfo\"));\n    }\n\n    return basicInfo;\n  });\n}\n\nfunction getContactInfo(client_id, is_active, token) {\n  localStorage.removeItem(\"contactInfo\");\n  return fetch(\"http://localhost:5000/contact_info?client_id=\".concat(client_id, \"&is_active=\").concat(is_active, \"&token=\").concat(token)).then(handleResponse).then(function (contactInfo) {\n    // login successful if there's a user in the response\n    if (contactInfo) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"contactInfo\", JSON.stringify(contactInfo));\n      console.log(\"contactInfo:\" + localStorage.getItem(\"contactInfo\"));\n    }\n\n    return contactInfo;\n  });\n}\n\nfunction getCaregiver(client_id, token, is_active) {\n  localStorage.removeItem(\"caregiver\");\n  return fetch(\"http://localhost:5000/caregiver?client_id=\".concat(client_id, \"&token=\").concat(token, \"&is_active=\").concat(is_active)).then(handleResponse).then(function (caregiver) {\n    // login successful if there's a user in the response\n    if (caregiver) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"caregiver\", JSON.stringify(caregiver));\n      console.log(\"caregiver:\" + localStorage.getItem(\"caregiver\"));\n    }\n\n    return caregiver;\n  });\n}\n\nfunction getPhysician(client_id, token) {\n  localStorage.removeItem(\"physician\");\n  return fetch(\"http://localhost:5000/physician?client_id=\".concat(client_id, \"&token=\").concat(token)).then(handleResponse).then(function (physician) {\n    // login successful if there's a user in the response\n    if (physician) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"physician\", JSON.stringify(physician));\n      console.log(\"physician:\" + localStorage.getItem(\"physician\"));\n    }\n\n    return physician;\n  });\n}\n\nfunction getEpisodes(client_id, token, is_active) {\n  localStorage.removeItem(\"episodes\");\n  return fetch(\"http://localhost:5000/episodes?client_id=\".concat(client_id, \"&token=\").concat(token, \"&is_active=\").concat(is_active)).then(handleResponse).then(function (episodes) {\n    // login successful if there's a user in the response\n    if (episodes) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"episodes\", JSON.stringify(episodes));\n      console.log(\"episodes:\" + localStorage.getItem(\"episodes\"));\n    }\n\n    return episodes;\n  });\n}\n\nfunction getCaregiverContactInfo(client_id, token, is_active, caregiver_client_id) {\n  localStorage.removeItem(\"caregiverContactInfo\");\n  return fetch(\"http://localhost:5000/caregiver_contact_info?client_id=\".concat(client_id, \"&token=\").concat(token, \"&is_active=\").concat(is_active, \"&caregiver_client_id=\").concat(caregiver_client_id)).then(handleResponse).then(function (caregiverContactInfo) {\n    // login successful if there's a user in the response\n    if (caregiverContactInfo) {\n      // store user details and basic auth credentials in local storage\n      // to keep user logged in between page refreshes\n      localStorage.setItem(\"caregiverContactInfo\" + client_id, JSON.stringify(caregiverContactInfo));\n      console.log(\"caregiverContactInfo:\" + localStorage.getItem(\"caregiverContactInfo\" + client_id));\n    }\n\n    return caregiverContactInfo;\n  });\n}\n\nfunction getAlerts() {\n  localStorage.removeItem(\"alerts\");\n  return fetch(\"http://www.mocky.io/v2/5d1a60c62f00000e00fd7624\") // We get the API response and receive data in JSON format...\n  .then(function (response) {\n    return response.json();\n  }) // ...then we locally store data\n  .then(function (alerts) {\n    localStorage.setItem(\"alerts\", JSON.stringify(alerts));\n    var ale = localStorage.getItem(\"alerts\");\n    console.log(\"print alerts:\" + alerts);\n    return ale;\n  });\n}\n\nfunction logout() {\n  localStorage.removeItem(\"oneUser\"); //localStorage.removeItem(\"address\");\n}\n\nfunction getAll() {\n  var requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users\"), requestOptions).then(handleResponse);\n}\n\nfunction updateLanguage(client_id, token, service_language) {\n  return fetch(\"http://localhost:5000/client/\".concat(client_id, \"/service_language?token=\").concat(token, \"&service_language=\").concat(service_language), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction addDiet(client_id, token, diet) {\n  return fetch(\"http://localhost:5000/client/\".concat(client_id, \"/add_diet?token=\").concat(token, \"&diet=\").concat(diet), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction addAdvanceDirective(client_id, token, advance_directive) {\n  return fetch(\"http://localhost:5000/client/\".concat(client_id, \"/add_advance_directive?token=\").concat(token, \"&advance_directive=\").concat(advance_directive), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction editContactInfo(client_id, token, category, text, type) {\n  return fetch(\"http://localhost:5000/client/\".concat(client_id, \"/edit_contact_info?token=\").concat(token, \"&category=\").concat(category, \"&text=\").concat(text, \"&type=\").concat(type), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction editCaregivers(client_id, token, name, relationship, is_primary) {\n  return fetch(\"http://localhost:5000/client/\".concat(client_id, \"/edit_caregivers?token=\").concat(token, \"&name=\").concat(name, \"&relationship=\").concat(relationship, \"&is_primary=\").concat(is_primary), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction editCaregiverContacts(client_id, token, category, text, type, is_primary) {\n  return fetch(\"http://localhost:5000/client/\".concat(client_id, \"/edit_caregiver_contacts?token=\").concat(token, \"&category=\").concat(category, \"&text=\").concat(text, \"&type=\").concat(type, \"&is_primary=\").concat(is_primary), {\n    method: \"POST\",\n    //mode: \"CORS\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res;\n  }).catch(function (err) {\n    return err;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); //location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/wenyanli/Downloads/MyPHR_Portal-master-2/src/service.js"],"names":["config","authHeader","userService","login","newLogin","getBasicInfo","getContactInfo","logout","getCaregiver","getClient","getAll","getAddress","getCaregivers","getEpisodes","getHealthProfile","getPhysician","getCaregiverContactInfo","updateLanguage","addDiet","addAdvanceDirective","editContactInfo","editCaregivers","editCaregiverContacts","getAlerts","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","removeItem","console","log","getItem","client_id","response","json","client","cli","id","address","c","caregivers","token","healthProfile","user_id","basicInfo","is_active","contactInfo","caregiver","physician","episodes","caregiver_client_id","caregiverContactInfo","alerts","ale","service_language","res","catch","err","diet","advance_directive","category","text","type","name","relationship","is_primary","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import config from \"config\";\nimport { authHeader } from \"./backend\";\n\nexport const userService = {\n  login, //fake\n  newLogin, //real\n  getBasicInfo, //real\n  getContactInfo, //real\n  logout,\n  getCaregiver, //real\n  getClient, //fake\n  getAll,\n  getAddress, //fake\n  getCaregivers, //fake\n\n  getEpisodes,\n  getHealthProfile, //real\n  getPhysician, //real\n  getCaregiverContactInfo,\n\n  //fetch POST methods\n  updateLanguage,\n  addDiet,\n  addAdvanceDirective,\n  editContactInfo,\n  editCaregivers,\n  editCaregiverContacts,\n\n  getAlerts\n};\n\n//for fake api, responsing to backend.js\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password })\n  };\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n    .then(handleResponse)\n    .then(user => {\n      // login successful if there's a user in the response\n      if (user) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        user.authdata = window.btoa(username + \":\" + password);\n        localStorage.setItem(\"user\", JSON.stringify(user));\n      }\n\n      return user;\n    });\n}\n\n/**\n * fetch from real api\n */\n\nfunction newLogin(username, password) {\n  //each time fresh local storage\n  localStorage.removeItem(\"oneUser\");\n\n  return fetch(\n    `http://localhost:5000/login?username=${username}&password=${password}`\n  )\n    .then(handleResponse)\n    .then(user => {\n      // login successful if there's a user in the response\n      if (user) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"oneUser\", JSON.stringify(user));\n        console.log(localStorage.getItem(\"oneUser\"));\n        //store client_id and token locally\n      }\n      return user;\n    });\n}\n\nfunction getClient(client_id) {\n  localStorage.removeItem(\"client\");\n  return (\n    fetch(`https://5cdc6232069eb30014202d8e.mockapi.io/profile/${client_id}`) //must have a place to put userId\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we update the users state\n      .then(client => {\n        localStorage.setItem(\"client\", JSON.stringify(client));\n        console.log(\"llll:\" + localStorage.getItem(\"client\"));\n        const cli = localStorage.getItem(\"client\");\n\n        return cli;\n      })\n  );\n}\nfunction getAddress(id) {\n  return (\n    fetch(`https://5cdc6232069eb30014202d8e.mockapi.io/addresses/${id}`) //must have a place to put userId\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we update the users state\n      .then(address => {\n        localStorage.setItem(\"address\", JSON.stringify(address));\n\n        const c = localStorage.getItem(\"address\");\n\n        return c;\n      })\n  );\n}\n//https://5cdc6232069eb30014202d8e.mockapi.io/addresses/${id}\n\n//how about two or more caregivers, is the client_id patient id?\nfunction getCaregivers(client_id) {\n  localStorage.removeItem(\"caregivers\");\n  return (\n    fetch(`https://5cdc6232069eb30014202d8e.mockapi.io/caregivers/${client_id}`) //must have a place to put userId\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we update the users state\n      .then(caregivers => {\n        localStorage.setItem(\"caregivers\", JSON.stringify(caregivers));\n\n        const c = localStorage.getItem(\"caregivers\");\n        // console.log(\"print caregiver:\" + c);\n        return c;\n      })\n  );\n}\n\n//response to real api\nfunction getHealthProfile(client_id, token) {\n  localStorage.removeItem(\"healthProfile\");\n\n  return fetch(\n    `http://localhost:5000/health_profile?client_id=${client_id}&token=${token}`\n  )\n    .then(handleResponse)\n    .then(healthProfile => {\n      // login successful if there's a user in the response\n      if (healthProfile) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"healthProfile\", JSON.stringify(healthProfile));\n        console.log(\n          \"health profile information:\" + localStorage.getItem(\"healthProfile\")\n        );\n      }\n      return healthProfile;\n    });\n}\n\nfunction getBasicInfo(client_id, user_id, token) {\n  localStorage.removeItem(\"basicInfo\");\n  return fetch(\n    `http://localhost:5000/basic_info?client_id=${client_id}&user_id=${user_id}&token=${token}`\n  )\n    .then(handleResponse)\n    .then(basicInfo => {\n      // login successful if there's a user in the response\n      if (basicInfo) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"basicInfo\", JSON.stringify(basicInfo));\n        console.log(\"basicInfo:\" + localStorage.getItem(\"basicInfo\"));\n      }\n      return basicInfo;\n    });\n}\n\nfunction getContactInfo(client_id, is_active, token) {\n  localStorage.removeItem(\"contactInfo\");\n  return fetch(\n    `http://localhost:5000/contact_info?client_id=${client_id}&is_active=${is_active}&token=${token}`\n  )\n    .then(handleResponse)\n    .then(contactInfo => {\n      // login successful if there's a user in the response\n      if (contactInfo) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"contactInfo\", JSON.stringify(contactInfo));\n        console.log(\"contactInfo:\" + localStorage.getItem(\"contactInfo\"));\n      }\n      return contactInfo;\n    });\n}\nfunction getCaregiver(client_id, token, is_active) {\n  localStorage.removeItem(\"caregiver\");\n  return fetch(\n    `http://localhost:5000/caregiver?client_id=${client_id}&token=${token}&is_active=${is_active}`\n  )\n    .then(handleResponse)\n    .then(caregiver => {\n      // login successful if there's a user in the response\n      if (caregiver) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"caregiver\", JSON.stringify(caregiver));\n        console.log(\"caregiver:\" + localStorage.getItem(\"caregiver\"));\n      }\n      return caregiver;\n    });\n}\nfunction getPhysician(client_id, token) {\n  localStorage.removeItem(\"physician\");\n  return fetch(\n    `http://localhost:5000/physician?client_id=${client_id}&token=${token}`\n  )\n    .then(handleResponse)\n    .then(physician => {\n      // login successful if there's a user in the response\n      if (physician) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"physician\", JSON.stringify(physician));\n        console.log(\"physician:\" + localStorage.getItem(\"physician\"));\n      }\n      return physician;\n    });\n}\nfunction getEpisodes(client_id, token, is_active) {\n  localStorage.removeItem(\"episodes\");\n  return fetch(\n    `http://localhost:5000/episodes?client_id=${client_id}&token=${token}&is_active=${is_active}`\n  )\n    .then(handleResponse)\n    .then(episodes => {\n      // login successful if there's a user in the response\n      if (episodes) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\"episodes\", JSON.stringify(episodes));\n        console.log(\"episodes:\" + localStorage.getItem(\"episodes\"));\n      }\n      return episodes;\n    });\n}\nfunction getCaregiverContactInfo(\n  client_id,\n  token,\n  is_active,\n  caregiver_client_id\n) {\n  localStorage.removeItem(\"caregiverContactInfo\");\n  return fetch(\n    `http://localhost:5000/caregiver_contact_info?client_id=${client_id}&token=${token}&is_active=${is_active}&caregiver_client_id=${caregiver_client_id}`\n  )\n    .then(handleResponse)\n    .then(caregiverContactInfo => {\n      // login successful if there's a user in the response\n      if (caregiverContactInfo) {\n        // store user details and basic auth credentials in local storage\n        // to keep user logged in between page refreshes\n        localStorage.setItem(\n          \"caregiverContactInfo\" + client_id,\n          JSON.stringify(caregiverContactInfo)\n        );\n        console.log(\n          \"caregiverContactInfo:\" +\n            localStorage.getItem(\"caregiverContactInfo\" + client_id)\n        );\n      }\n      return caregiverContactInfo;\n    });\n}\nfunction getAlerts() {\n  localStorage.removeItem(\"alerts\");\n  return (\n    fetch(`http://www.mocky.io/v2/5d1a60c62f00000e00fd7624`)\n      // We get the API response and receive data in JSON format...\n      .then(response => response.json())\n      // ...then we locally store data\n      .then(alerts => {\n        localStorage.setItem(\"alerts\", JSON.stringify(alerts));\n\n        const ale = localStorage.getItem(\"alerts\");\n        console.log(\"print alerts:\" + alerts);\n        return ale;\n      })\n  );\n}\n\nfunction logout() {\n  localStorage.removeItem(\"oneUser\");\n  //localStorage.removeItem(\"address\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction updateLanguage(client_id, token, service_language) {\n  return fetch(\n    `http://localhost:5000/client/${client_id}/service_language?token=${token}&service_language=${service_language}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction addDiet(client_id, token, diet) {\n  return fetch(\n    `http://localhost:5000/client/${client_id}/add_diet?token=${token}&diet=${diet}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction addAdvanceDirective(client_id, token, advance_directive) {\n  return fetch(\n    `http://localhost:5000/client/${client_id}/add_advance_directive?token=${token}&advance_directive=${advance_directive}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction editContactInfo(client_id, token, category, text, type) {\n  return fetch(\n    `http://localhost:5000/client/${client_id}/edit_contact_info?token=${token}&category=${category}&text=${text}&type=${type}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction editCaregivers(client_id, token, name, relationship, is_primary) {\n  return fetch(\n    `http://localhost:5000/client/${client_id}/edit_caregivers?token=${token}&name=${name}&relationship=${relationship}&is_primary=${is_primary}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction editCaregiverContacts(\n  client_id,\n  token,\n  category,\n  text,\n  type,\n  is_primary\n) {\n  return fetch(\n    `http://localhost:5000/client/${client_id}/edit_caregiver_contacts?token=${token}&category=${category}&text=${text}&type=${type}&is_primary=${is_primary}`,\n    {\n      method: \"POST\",\n      //mode: \"CORS\",\n\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => {\n      return res;\n    })\n    .catch(err => err);\n}\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        //location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}