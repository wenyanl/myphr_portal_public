{"ast":null,"code":"export function configureBackend() {\n  var users = [{\n    id: 1,\n    username: \"111\",\n    password: \"pwd1\",\n    dob: \"1994-02-09\",\n    name: \"John Beker\",\n    gender: \"male\",\n    language: \"English\",\n    photo: \"https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg\"\n  }, {\n    id: 2,\n    username: \"112\",\n    password: \"pwd2\",\n    dob: \"1998-09-19\",\n    name: \"Gsawf Journeal\",\n    gender: \"female\",\n    language: \"English\",\n    photo: \"https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg\"\n  }, {\n    id: 3,\n    username: \"113\",\n    password: \"pwd3\",\n    dob: \"1987-07-23\",\n    name: \"Bon Kent\",\n    gender: \"male\",\n    language: \"French\",\n    photo: \"https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg\"\n  }, {}];\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith(\"/users/authenticate\") && opts.method === \"POST\") {\n          // get parameters from post request\n          var params = JSON.parse(opts.body); // find if any user matches login credentials\n\n          var filteredUsers = users.filter(function (user) {\n            return user.username === params.username && user.password === params.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.username,\n              dob: user.dob,\n              gender: user.gender,\n              name: user.name,\n              language: user.language,\n              photo: user.photo\n            };\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(responseJson));\n              }\n            });\n          } else {\n            // else return error\n            reject(\"Username or password is incorrect\");\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith(\"/users\") && opts.method === \"GET\") {\n          // check for fake auth token in header and return users if valid, this security\n          // is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === \"Basic \".concat(window.btoa(\"test:test\"))) {\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(users));\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            resolve({\n              status: 401,\n              text: function text() {\n                return Promise.resolve();\n              }\n            });\n          }\n\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}\nexport function authHeader() {\n  // return authorization header with basic auth credentials\n  var user = JSON.parse(localStorage.getItem(\"oneUser\"));\n\n  if (user && user.authdata) {\n    return {\n      Authorization: \"Basic \" + user.authdata\n    };\n  } else {\n    return {};\n  }\n}","map":{"version":3,"sources":["/Users/wenyanli/Desktop/MyPHR_Portal/src/backend.js"],"names":["configureBackend","users","id","username","password","dob","name","gender","language","photo","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","filteredUsers","filter","user","length","responseJson","ok","text","stringify","headers","Authorization","btoa","status","then","response","authHeader","localStorage","getItem","authdata"],"mappings":"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","sourcesContent":["export function configureBackend() {\n  let users = [\n    {\n      id: 1,\n      username: \"111\",\n      password: \"pwd1\",\n      dob: \"1994-02-09\",\n      name: \"John Beker\",\n      gender: \"male\",\n      language: \"English\",\n      photo:\n        \"https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg\"\n    },\n    {\n      id: 2,\n      username: \"112\",\n      password: \"pwd2\",\n      dob: \"1998-09-19\",\n      name: \"Gsawf Journeal\",\n      gender: \"female\",\n      language: \"English\",\n      photo: \"https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg\"\n    },\n    {\n      id: 3,\n      username: \"113\",\n      password: \"pwd3\",\n      dob: \"1987-07-23\",\n      name: \"Bon Kent\",\n      gender: \"male\",\n      language: \"French\",\n      photo: \"https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg\"\n    },\n    {}\n  ];\n  let realFetch = window.fetch;\n  window.fetch = function(url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate\n        if (url.endsWith(\"/users/authenticate\") && opts.method === \"POST\") {\n          // get parameters from post request\n          let params = JSON.parse(opts.body);\n\n          // find if any user matches login credentials\n          let filteredUsers = users.filter(user => {\n            return (\n              user.username === params.username &&\n              user.password === params.password\n            );\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details\n            let user = filteredUsers[0];\n            let responseJson = {\n              id: user.id,\n              username: user.username,\n              dob: user.dob,\n              gender: user.gender,\n              name: user.name,\n              language: user.language,\n              photo: user.photo\n            };\n            resolve({\n              ok: true,\n              text: () => Promise.resolve(JSON.stringify(responseJson))\n            });\n          } else {\n            // else return error\n            reject(\"Username or password is incorrect\");\n          }\n\n          return;\n        }\n\n        // get users\n        if (url.endsWith(\"/users\") && opts.method === \"GET\") {\n          // check for fake auth token in header and return users if valid, this security\n          // is implemented server side in a real application\n          if (\n            opts.headers &&\n            opts.headers.Authorization === `Basic ${window.btoa(\"test:test\")}`\n          ) {\n            resolve({\n              ok: true,\n              text: () => Promise.resolve(JSON.stringify(users))\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            resolve({ status: 401, text: () => Promise.resolve() });\n          }\n\n          return;\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(response => resolve(response));\n      }, 500);\n    });\n  };\n}\nexport function authHeader() {\n  // return authorization header with basic auth credentials\n  let user = JSON.parse(localStorage.getItem(\"oneUser\"));\n\n  if (user && user.authdata) {\n    return { Authorization: \"Basic \" + user.authdata };\n  } else {\n    return {};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}